---
# Rollback current PSU

- name: RAC | get list of database names on host
  shell: srvctl config database
  become_user: "{{ oracle_user }}"
  environment: "{{ env }}"
  register: dblist

- name: RAC | Generate srvctl state file
  template:
    src: srvctl_state.j2
    dest: "{{ oracle_home }}/srvm/admin/psu_state.txt"
    owner: "{{ oracle_user }}"
    group: "{{ oracle_group }}"

- name: RAC | delete srvctl state file if it exists
  file: path={{ oracle_home }}/srvm/admin/oneoffstop.txt state=absent

- name: RAC | Shutdown Oracle Home on first node
  shell: srvctl stop home -o {{ oracle_home }} -s {{ oracle_home }}/srvm/admin/oneoffstop.txt -n {{ ansible_hostname }} -f
  become_user: "{{ oracle_user }}"
  environment: "{{ env }}"
  when: master_node

- name: RAC | Rollback One Off patches on first node
  include: oneoff_rollback.yml
  when: master_node

- name: RAC | Rollback PSU
  shell: "{{ grid_home }}/OPatch/opatchauto rollback -local {{ patch_directory }}/{{ quarterly_patches[patch_type][oracle_version][patch_name].patchid }}"
  become_user: root
  register: rac_psu_rollback
  when:
    - master_node
    - "'{{ oracle_version }}' == '{{ grid_version }}'"

- name: RAC | Rollback PSU to database home (if db_home is different version than grid)
  shell: "opatch rollback -silent -id {{ quarterly_patches[patch_type][oracle_version][patch_name].si_patchid }}"
  environment: "{{ env }}"
  when:
    - master_node
    - "'{{ oracle_version }}' != '{{ grid_version }}'"


- debug: var=rac_psu_rollback.stdout_lines

- name: RAC ROLLBACK | Startup Oracle Home on first node
  shell: srvctl start home -o {{ oracle_home }} -s {{ oracle_home }}/srvm/admin/psu_state.txt -n {{ ansible_hostname }}
  become_user: "{{ oracle_user }}"
  environment: "{{ env }}"
  when: master_node
  ignore_errors: true

- name: RAC | Check if stuff is running
  shell: "{{ grid_home }}/bin/crsctl stat res -t"
  become_user: "{{ oracle_user }}"
  when: master_node
  register: stat_res_t

- debug: var=stat_res_t.stdout_lines

- name: RAC | Shutdown Oracle Home on second node
  shell: srvctl stop home -o {{ oracle_home }} -s {{ oracle_home }}/srvm/admin/oneoffstop.txt -n {{ ansible_hostname }} -f
  become_user: "{{ oracle_user }}"
  environment: "{{ env }}"
  when: not master_node

- name: RAC | Rollback One Off patches on second node
  include: oneoff_rollback.yml
  when: not master_node

- name: RAC | Rollback PSU on second node
  shell: "{{ grid_home }}/OPatch/opatchauto rollback {{ patch_directory }}/{{ quarterly_patches[patch_type][oracle_version][patch_name].patchid }}"
  become_user: root
  register: rac_psu_rollback
  when:
    - not master_node
    - "'{{ oracle_version }}' == '{{ grid_version }}'"

- name: RAC | Rollback PSU to database home (if db_home is different version than grid)
  shell: "opatch rollback -silent -id {{ quarterly_patches[patch_type][oracle_version][patch_name].si_patchid }}"
  environment: "{{ env }}"
  when:
    - not master_node
    - "'{{ oracle_version }}' != '{{ grid_version }}'"

- name: RAC | Startup Oracle Home on second node
  shell: srvctl start home -o {{ oracle_home }} -s {{ oracle_home }}/srvm/admin/psu_state.txt -n {{ ansible_hostname }}
  become_user: "{{ oracle_user }}"
  environment: "{{ env }}"
  when: not master_node
  ignore_errors: true

- name: RAC | Check if stuff is running
  shell: "{{ grid_home }}/bin/crsctl stat res -t"
  become_user: "{{ oracle_user }}"
  when: not master_node
  register: stat_res_t

- debug: var=stat_res_t.stdout_lines

- name: RAC | run rollback sql script (11.2.0.4)
  shell: export ORACLE_SID={{ item }}; echo exit | {{ oracle_home }}/bin/sqlplus / as sysdba @catbundle_PSU_{{ item }}_ROLLBACK.sql
  become_user: "{{ oracle_user }}"
  register: catbundle
  environment: "{{ env }}"
  with_items: "{{ dblist.stdout_lines }}"
  args:
    chdir: "{{ oracle_home }}/rdbms/admin"
  when: oracle_version == '11.2.0.4'
  run_once: true

# - debug: var=catbundle.results # too much output to be useful

- name: Check opatch lsinventory (DB)
  shell: "{{ oracle_home }}/OPatch/opatch lsinventory"
  become_user: "{{ oracle_user }}"
  register: opatchls

- debug: var=opatchls.stdout_lines
