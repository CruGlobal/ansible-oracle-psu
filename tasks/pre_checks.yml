---

- name: debug patch variable
  debug: var=quarterly_patches[patch_type][oracle_version][patch_name]
- name: debug opatch variable
  debug: var=opatch[oracle_version].filename

- name: fail if required variables are not defined
  fail: msg="{{ item }} is not defined for {{ ansible_hostname }}"
  when: "{{ item }} is not defined"
  tags: always
  with_items:
    - oracle_install_type
    - oracle_version
    - patch_type
    - patch_name

- name: Check for patch zip file in S3
  aws_s3:
    bucket: cru-oracle-install
    mode: list
    marker: "{{ quarterly_patches[patch_type][oracle_version][patch_name].filename }}"
    max_keys: 472
  register: s3_patch
  when: not ansible_check_mode
  # failed_when: "not {{ patch_st.stat.exists }}"

- debug: var=s3_patch

- name: Check if OPatch zip file exists
  aws_s3:
    bucket: cru-oracle-install
    mode: list
    marker: "{{ opatch[oracle_version].filename }}"
  register: s3_opatch
  when: not ansible_check_mode
  # failed_when: "not {{ opatch_st.stat.exists }}"

- debug: var=s3_opatch

# - name: fail if PSU-Specific one-off patches are missing
#   stat:
#     path: "{{ oracle_stage_install }}/{{ item.filename }}"
#   register: patch_st
#   with_items: oneoff_patches[ quarterly_patches[patch_type][oracle_version][patch_name].patchversion ]|default([])
#   when: "{{ oneoff_patches[ quarterly_patches[patch_type][oracle_version][patch_name].patchversion ] }} is defined"

# - name: Fail if missing PSU-Specific one-off patches
#   fail: msg="Oops! Missing one-off patch {{ item.item.filename }}"
#   with_items: patch_st.results
#   when:
#     - "{{ oneoff_patches[ quarterly_patches[patch_type][oracle_version][patch_name].patchversion ] }} is defined"
#     - "not {{ item.stat.exists }}"
