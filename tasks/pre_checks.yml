---

- name: fail if required variables are not defined
  fail: msg="{{ item }} is not defined for {{ ansible_hostname }}"
  when: "{{ item }} is not defined"
  tags: always
  with_items:
    - oracle_install_type
    - oracle_version
    - patch_type
    - patch_name

- name: Check for zip file
  stat:
    path: "{{ oracle_stage_install }}/{{ quarterly_patches[patch_type][oracle_version][patch_name].filename }}"
    get_checksum: false
    get_md5: false
  register: patch_st
  when: not ansible_check_mode
  failed_when: "not {{ patch_st.stat.exists }}"

- name: Check if OPatch zip file exists
  stat:
    path: "{{ oracle_stage_install }}/{{ opatch[oracle_version].filename }}"
  register: opatch_st
  when: not ansible_check_mode
  failed_when: "not {{ opatch_st.stat.exists }}"

# - name: fail if PSU-Specific one-off patches are missing
#   stat:
#     path: "{{ oracle_stage_install }}/{{ item.filename }}"
#   register: patch_st
#   with_items: oneoff_patches[ quarterly_patches[patch_type][oracle_version][patch_name].patchversion ]|default([])
#   when: "{{ oneoff_patches[ quarterly_patches[patch_type][oracle_version][patch_name].patchversion ] }} is defined"

# - name: Fail if missing PSU-Specific one-off patches
#   fail: msg="Oops! Missing one-off patch {{ item.item.filename }}"
#   with_items: patch_st.results
#   when:
#     - "{{ oneoff_patches[ quarterly_patches[patch_type][oracle_version][patch_name].patchversion ] }} is defined"
#     - "not {{ item.stat.exists }}"
